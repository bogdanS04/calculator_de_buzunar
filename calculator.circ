<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="UC"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="UC">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="UC"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadBoard" val="BASYS3"/>
    <a name="simulationFrequency" val="4.0"/>
    <boardmap boardname="BASYS3">
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
    </boardmap>
    <comp lib="0" loc="(1110,580)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_2"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1450,520)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_1"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1560,870)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_3"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1800,360)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_1"/>
      <a name="output" val="true"/>
      <a name="width" val="7"/>
    </comp>
    <comp lib="0" loc="(1800,380)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_2"/>
      <a name="output" val="true"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(2080,780)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_5"/>
      <a name="output" val="true"/>
      <a name="width" val="3"/>
    </comp>
    <comp lib="0" loc="(2400,560)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_3"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(2410,660)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_4"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(280,570)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_bus_1"/>
      <a name="radix" val="16"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(390,370)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_1"/>
    </comp>
    <comp lib="0" loc="(390,390)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_2"/>
    </comp>
    <comp lib="0" loc="(390,410)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_3"/>
    </comp>
    <comp lib="0" loc="(390,430)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_4"/>
    </comp>
    <comp lib="0" loc="(390,450)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_5"/>
    </comp>
    <comp lib="0" loc="(390,470)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_6"/>
    </comp>
    <comp lib="0" loc="(430,710)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_8"/>
    </comp>
    <comp lib="0" loc="(890,1040)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_11"/>
    </comp>
    <comp lib="0" loc="(890,800)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_9"/>
    </comp>
    <comp lib="0" loc="(890,920)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_10"/>
    </comp>
    <comp lib="0" loc="(930,700)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_7"/>
    </comp>
    <comp loc="(1190,680)" name="debouncer">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="debouncer_1"/>
    </comp>
    <comp loc="(1190,780)" name="debouncer">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="debouncer_3"/>
    </comp>
    <comp loc="(1190,900)" name="debouncer">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="debouncer_4"/>
    </comp>
    <comp loc="(1200,1020)" name="debouncer">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="debouncer_5"/>
    </comp>
    <comp loc="(1390,370)" name="bin_bcd">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="bin_bcd_1"/>
    </comp>
    <comp loc="(1670,620)" name="dmux">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="dmux_1"/>
    </comp>
    <comp loc="(1730,360)" name="SSD">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="ssd_1"/>
    </comp>
    <comp loc="(2270,560)" name="register_16bit">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="register_16bit_1"/>
    </comp>
    <comp loc="(2280,660)" name="register_16bit">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="register_16bit_3"/>
    </comp>
    <comp loc="(620,570)" name="register_16bit">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="register_16bit_2"/>
    </comp>
    <comp loc="(670,370)" name="IN_operator">
      <a name="label" val="IN_operator_1"/>
    </comp>
    <comp loc="(680,690)" name="debouncer">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="debouncer_2"/>
    </comp>
    <comp loc="(980,560)" name="mux">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="mux_1"/>
    </comp>
    <wire from="(1050,530)" to="(1050,580)"/>
    <wire from="(1050,530)" to="(1090,530)"/>
    <wire from="(1050,580)" to="(1050,620)"/>
    <wire from="(1050,620)" to="(1450,620)"/>
    <wire from="(1090,370)" to="(1090,530)"/>
    <wire from="(1090,370)" to="(1170,370)"/>
    <wire from="(1110,560)" to="(1110,580)"/>
    <wire from="(1190,640)" to="(1190,680)"/>
    <wire from="(1190,640)" to="(1450,640)"/>
    <wire from="(1190,780)" to="(1210,780)"/>
    <wire from="(1190,900)" to="(1370,900)"/>
    <wire from="(1200,1020)" to="(1410,1020)"/>
    <wire from="(1210,660)" to="(1210,780)"/>
    <wire from="(1210,660)" to="(1450,660)"/>
    <wire from="(1370,680)" to="(1370,900)"/>
    <wire from="(1370,680)" to="(1450,680)"/>
    <wire from="(1390,370)" to="(1490,370)"/>
    <wire from="(1390,390)" to="(1510,390)"/>
    <wire from="(1390,410)" to="(1510,410)"/>
    <wire from="(1390,430)" to="(1490,430)"/>
    <wire from="(1390,450)" to="(1450,450)"/>
    <wire from="(1410,700)" to="(1410,870)"/>
    <wire from="(1410,700)" to="(1450,700)"/>
    <wire from="(1410,870)" to="(1410,1020)"/>
    <wire from="(1410,870)" to="(1560,870)"/>
    <wire from="(1450,450)" to="(1450,520)"/>
    <wire from="(1460,300)" to="(1460,440)"/>
    <wire from="(1460,440)" to="(1490,440)"/>
    <wire from="(1490,360)" to="(1490,370)"/>
    <wire from="(1490,360)" to="(1510,360)"/>
    <wire from="(1490,420)" to="(1490,430)"/>
    <wire from="(1490,420)" to="(1510,420)"/>
    <wire from="(1490,440)" to="(1490,500)"/>
    <wire from="(1490,440)" to="(1510,440)"/>
    <wire from="(1490,500)" to="(2020,500)"/>
    <wire from="(1510,380)" to="(1510,390)"/>
    <wire from="(1510,400)" to="(1510,410)"/>
    <wire from="(1510,420)" to="(1520,420)"/>
    <wire from="(1670,620)" to="(1980,620)"/>
    <wire from="(1670,640)" to="(2060,640)"/>
    <wire from="(1670,660)" to="(1760,660)"/>
    <wire from="(1720,380)" to="(1730,380)"/>
    <wire from="(1730,360)" to="(1800,360)"/>
    <wire from="(1730,380)" to="(1800,380)"/>
    <wire from="(1740,700)" to="(1740,760)"/>
    <wire from="(1740,700)" to="(1760,700)"/>
    <wire from="(1740,760)" to="(2080,760)"/>
    <wire from="(1760,660)" to="(1760,700)"/>
    <wire from="(1980,560)" to="(1980,620)"/>
    <wire from="(1980,560)" to="(2050,560)"/>
    <wire from="(2020,500)" to="(2020,580)"/>
    <wire from="(2020,580)" to="(2040,580)"/>
    <wire from="(2040,580)" to="(2040,680)"/>
    <wire from="(2040,580)" to="(2050,580)"/>
    <wire from="(2040,680)" to="(2060,680)"/>
    <wire from="(2060,640)" to="(2060,660)"/>
    <wire from="(2080,760)" to="(2080,780)"/>
    <wire from="(2270,560)" to="(2400,560)"/>
    <wire from="(2280,660)" to="(2410,660)"/>
    <wire from="(280,570)" to="(400,570)"/>
    <wire from="(340,520)" to="(340,660)"/>
    <wire from="(340,520)" to="(430,520)"/>
    <wire from="(340,660)" to="(340,690)"/>
    <wire from="(340,660)" to="(940,660)"/>
    <wire from="(340,690)" to="(460,690)"/>
    <wire from="(380,540)" to="(380,590)"/>
    <wire from="(380,540)" to="(400,540)"/>
    <wire from="(380,590)" to="(400,590)"/>
    <wire from="(390,370)" to="(450,370)"/>
    <wire from="(390,390)" to="(400,390)"/>
    <wire from="(390,410)" to="(450,410)"/>
    <wire from="(390,430)" to="(450,430)"/>
    <wire from="(390,450)" to="(450,450)"/>
    <wire from="(390,470)" to="(450,470)"/>
    <wire from="(400,390)" to="(400,540)"/>
    <wire from="(400,390)" to="(410,390)"/>
    <wire from="(410,300)" to="(1460,300)"/>
    <wire from="(410,300)" to="(410,390)"/>
    <wire from="(410,390)" to="(430,390)"/>
    <wire from="(430,390)" to="(430,520)"/>
    <wire from="(430,390)" to="(450,390)"/>
    <wire from="(430,710)" to="(460,710)"/>
    <wire from="(450,390)" to="(460,390)"/>
    <wire from="(620,570)" to="(720,570)"/>
    <wire from="(670,370)" to="(670,580)"/>
    <wire from="(670,580)" to="(760,580)"/>
    <wire from="(680,690)" to="(740,690)"/>
    <wire from="(720,560)" to="(720,570)"/>
    <wire from="(720,560)" to="(760,560)"/>
    <wire from="(740,600)" to="(740,690)"/>
    <wire from="(740,600)" to="(760,600)"/>
    <wire from="(890,1040)" to="(980,1040)"/>
    <wire from="(890,800)" to="(970,800)"/>
    <wire from="(890,920)" to="(970,920)"/>
    <wire from="(930,700)" to="(970,700)"/>
    <wire from="(940,1020)" to="(980,1020)"/>
    <wire from="(940,660)" to="(940,780)"/>
    <wire from="(940,660)" to="(970,660)"/>
    <wire from="(940,780)" to="(940,900)"/>
    <wire from="(940,780)" to="(970,780)"/>
    <wire from="(940,900)" to="(940,1020)"/>
    <wire from="(940,900)" to="(970,900)"/>
    <wire from="(970,660)" to="(970,680)"/>
    <wire from="(970,920)" to="(980,920)"/>
    <wire from="(980,560)" to="(1110,560)"/>
    <wire from="(980,580)" to="(1050,580)"/>
    <wire from="(980,920)" to="(980,930)"/>
  </circuit>
  <circuit name="UE">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="UE"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadBoard" val="BASYS3"/>
    <a name="simulationFrequency" val="4.0"/>
    <comp lib="0" loc="(1240,280)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_1"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(150,270)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_bus_1"/>
      <a name="radix" val="16"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(150,300)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_bus_2"/>
      <a name="radix" val="16"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(830,450)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_bus_3"/>
      <a name="width" val="3"/>
    </comp>
    <comp lib="0" loc="(840,350)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_1"/>
    </comp>
    <comp loc="(1130,280)" name="mux_ue">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="mux_ue_1"/>
    </comp>
    <comp loc="(640,150)" name="sumator_scazator">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="sumator_scazator_1"/>
    </comp>
    <comp loc="(640,280)" name="booth_multiplier">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="booth_multiplier_1"/>
    </comp>
    <comp loc="(640,420)" name="impartire">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <wire from="(1130,280)" to="(1240,280)"/>
    <wire from="(150,270)" to="(240,270)"/>
    <wire from="(150,300)" to="(270,300)"/>
    <wire from="(240,270)" to="(240,420)"/>
    <wire from="(240,270)" to="(270,270)"/>
    <wire from="(240,420)" to="(420,420)"/>
    <wire from="(270,150)" to="(270,270)"/>
    <wire from="(270,150)" to="(420,150)"/>
    <wire from="(270,270)" to="(420,270)"/>
    <wire from="(270,300)" to="(270,440)"/>
    <wire from="(270,300)" to="(300,300)"/>
    <wire from="(270,440)" to="(420,440)"/>
    <wire from="(300,170)" to="(300,300)"/>
    <wire from="(300,170)" to="(420,170)"/>
    <wire from="(300,300)" to="(420,300)"/>
    <wire from="(420,270)" to="(420,280)"/>
    <wire from="(640,150)" to="(910,150)"/>
    <wire from="(640,280)" to="(880,280)"/>
    <wire from="(640,420)" to="(690,420)"/>
    <wire from="(690,320)" to="(690,420)"/>
    <wire from="(690,320)" to="(910,320)"/>
    <wire from="(830,450)" to="(890,450)"/>
    <wire from="(840,350)" to="(910,350)"/>
    <wire from="(880,280)" to="(880,300)"/>
    <wire from="(880,300)" to="(910,300)"/>
    <wire from="(890,360)" to="(890,450)"/>
    <wire from="(890,360)" to="(910,360)"/>
    <wire from="(910,150)" to="(910,280)"/>
    <wire from="(910,340)" to="(910,350)"/>
  </circuit>
  <circuit name="IN_operator">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="IN_operator"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="4.0"/>
    <comp lib="0" loc="(1250,510)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_4"/>
    </comp>
    <comp lib="0" loc="(1580,430)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_1"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(350,480)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_2"/>
    </comp>
    <comp lib="0" loc="(750,390)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_1"/>
    </comp>
    <comp lib="0" loc="(760,580)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_5"/>
    </comp>
    <comp lib="0" loc="(760,680)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_6"/>
    </comp>
    <comp lib="0" loc="(800,480)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_3"/>
    </comp>
    <comp loc="(1000,370)" name="counter_zecimal">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="counter_zecimal_1"/>
    </comp>
    <comp loc="(1020,560)" name="counter_zecimal">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="counter_zecimal_3"/>
    </comp>
    <comp loc="(1020,660)" name="counter_zecimal">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="counter_zecimal_4"/>
    </comp>
    <comp loc="(1040,460)" name="counter_zecimal">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="counter_zecimal_2"/>
    </comp>
    <comp loc="(1500,430)" name="bcd_bin">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="bcd_bin_1"/>
    </comp>
    <comp loc="(650,480)" name="divizor_frecventa">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="divizor_frecventa_1"/>
    </comp>
    <wire from="(1000,370)" to="(1230,370)"/>
    <wire from="(1020,560)" to="(1140,560)"/>
    <wire from="(1020,660)" to="(1180,660)"/>
    <wire from="(1040,460)" to="(1180,460)"/>
    <wire from="(1140,470)" to="(1140,560)"/>
    <wire from="(1140,470)" to="(1280,470)"/>
    <wire from="(1180,450)" to="(1180,460)"/>
    <wire from="(1180,450)" to="(1280,450)"/>
    <wire from="(1180,490)" to="(1180,660)"/>
    <wire from="(1180,490)" to="(1280,490)"/>
    <wire from="(1230,370)" to="(1230,430)"/>
    <wire from="(1230,430)" to="(1280,430)"/>
    <wire from="(1250,510)" to="(1280,510)"/>
    <wire from="(1500,430)" to="(1580,430)"/>
    <wire from="(350,480)" to="(430,480)"/>
    <wire from="(650,480)" to="(680,480)"/>
    <wire from="(680,360)" to="(680,480)"/>
    <wire from="(680,360)" to="(780,360)"/>
    <wire from="(680,480)" to="(680,560)"/>
    <wire from="(680,480)" to="(750,480)"/>
    <wire from="(680,560)" to="(680,660)"/>
    <wire from="(680,560)" to="(800,560)"/>
    <wire from="(680,660)" to="(800,660)"/>
    <wire from="(750,390)" to="(780,390)"/>
    <wire from="(750,460)" to="(750,480)"/>
    <wire from="(750,460)" to="(820,460)"/>
    <wire from="(760,580)" to="(800,580)"/>
    <wire from="(760,680)" to="(800,680)"/>
    <wire from="(780,360)" to="(780,370)"/>
    <wire from="(780,390)" to="(790,390)"/>
    <wire from="(800,480)" to="(820,480)"/>
  </circuit>
  <circuit name="CALC">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="CALC"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadBoard" val="BASYS3"/>
    <a name="simulationFrequency" val="4.0"/>
    <boardmap boardname="BASYS3">
      <mc key="/Input_1" map="192,323"/>
      <mc key="/Input_10" map="582,238"/>
      <mc key="/Input_11" map="536,203"/>
      <mc key="/Input_2" map="321,237"/>
      <mc key="/Input_3" map="154,323"/>
      <mc key="/Input_4" map="228,323"/>
      <mc key="/Input_5" map="117,323"/>
      <mc key="/Input_6" map="78,323"/>
      <mc key="/Input_7" map="487,236"/>
      <mc key="/Input_8" map="536,235"/>
      <mc key="/Input_9" map="536,272"/>
      <mc key="/Output_1" map="92,295"/>
      <mc key="/Output_2" map="131,295"/>
      <mc key="/Output_bus_1" pmap="136_245_0,154_248_0,154_262_0,136_274_0,130_263_0,130_249_0,138_258_0"/>
      <mc key="/Output_bus_2" pmap="273_234_0,225_234_0,180_234_0,130_234_0"/>
      <mc key="/Output_bus_3" pmap="353_295_0,315_295_0,278_295_0"/>
    </boardmap>
    <comp lib="0" loc="(1040,710)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_3"/>
      <a name="output" val="true"/>
      <a name="width" val="3"/>
    </comp>
    <comp lib="0" loc="(240,440)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_1"/>
    </comp>
    <comp lib="0" loc="(240,460)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_2"/>
    </comp>
    <comp lib="0" loc="(240,480)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_3"/>
    </comp>
    <comp lib="0" loc="(240,500)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_4"/>
    </comp>
    <comp lib="0" loc="(240,520)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_5"/>
    </comp>
    <comp lib="0" loc="(240,540)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_6"/>
    </comp>
    <comp lib="0" loc="(240,580)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_7"/>
    </comp>
    <comp lib="0" loc="(240,600)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_8"/>
    </comp>
    <comp lib="0" loc="(240,620)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_9"/>
    </comp>
    <comp lib="0" loc="(240,640)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_10"/>
    </comp>
    <comp lib="0" loc="(240,660)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_11"/>
    </comp>
    <comp lib="0" loc="(730,500)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_2"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(810,440)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_1"/>
      <a name="output" val="true"/>
      <a name="width" val="7"/>
    </comp>
    <comp lib="0" loc="(810,460)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_2"/>
      <a name="output" val="true"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(810,480)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_1"/>
      <a name="output" val="true"/>
    </comp>
    <comp loc="(1300,530)" name="UE">
      <a name="label" val="UE_1"/>
    </comp>
    <comp loc="(640,440)" name="UC">
      <a name="label" val="UC_1"/>
    </comp>
    <wire from="(1020,560)" to="(1020,600)"/>
    <wire from="(1020,600)" to="(1040,600)"/>
    <wire from="(1040,600)" to="(1040,710)"/>
    <wire from="(1040,600)" to="(1080,600)"/>
    <wire from="(1080,520)" to="(1080,530)"/>
    <wire from="(1080,540)" to="(1080,550)"/>
    <wire from="(1080,570)" to="(1080,580)"/>
    <wire from="(1080,590)" to="(1080,600)"/>
    <wire from="(1300,370)" to="(1300,530)"/>
    <wire from="(240,440)" to="(420,440)"/>
    <wire from="(240,460)" to="(420,460)"/>
    <wire from="(240,480)" to="(420,480)"/>
    <wire from="(240,500)" to="(420,500)"/>
    <wire from="(240,520)" to="(420,520)"/>
    <wire from="(240,540)" to="(420,540)"/>
    <wire from="(240,580)" to="(420,580)"/>
    <wire from="(240,600)" to="(420,600)"/>
    <wire from="(240,620)" to="(420,620)"/>
    <wire from="(240,640)" to="(420,640)"/>
    <wire from="(240,660)" to="(420,660)"/>
    <wire from="(370,370)" to="(1300,370)"/>
    <wire from="(370,370)" to="(370,560)"/>
    <wire from="(370,560)" to="(420,560)"/>
    <wire from="(420,660)" to="(430,660)"/>
    <wire from="(640,440)" to="(810,440)"/>
    <wire from="(640,460)" to="(810,460)"/>
    <wire from="(640,480)" to="(810,480)"/>
    <wire from="(640,500)" to="(710,500)"/>
    <wire from="(640,520)" to="(690,520)"/>
    <wire from="(640,540)" to="(1080,540)"/>
    <wire from="(640,560)" to="(1020,560)"/>
    <wire from="(640,580)" to="(1080,580)"/>
    <wire from="(690,510)" to="(690,520)"/>
    <wire from="(690,510)" to="(730,510)"/>
    <wire from="(710,500)" to="(710,520)"/>
    <wire from="(710,520)" to="(1080,520)"/>
    <wire from="(730,500)" to="(730,510)"/>
  </circuit>
  <vhdl name="counter_zecimal">&#13;LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
use ieee.std_logic_unsigned.all;
&#13;
ENTITY counter_zecimal IS&#13;
  PORT (&#13;
  	clk_1s: in std_logic;
  	en: in std_logic;
  	cifra: out std_logic_vector(3 downto 0)
    );&#13;
END counter_zecimal;&#13;
&#13;
&#13;
ARCHITECTURE TypeArchitecture OF counter_zecimal IS&#13;

BEGIN&#13;
&#13;
counter: process(clk_1s, en)
variable aux: std_logic_vector(3 downto 0):="0000";

begin
	if clk_1s = '1' and clk_1s'event then
		if en = '0' then
			if aux &gt;= "1001" then aux:="0000";
			else
			aux:= aux+'1';
			end if;
			cifra&lt;=aux;
		else
			cifra&lt;=aux;
		end if;
	
	end if;
end process counter;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="SSD">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity SSD is	--7 segments display
    Port ( digit0 : in STD_LOGIC_VECTOR (3 downto 0);
           digit1 : in STD_LOGIC_VECTOR (3 downto 0);
           digit2 : in STD_LOGIC_VECTOR (3 downto 0);
           digit3 : in STD_LOGIC_VECTOR (3 downto 0);
           clk : in STD_LOGIC;
           catod : out STD_LOGIC_VECTOR (6 downto 0);
           anod : out STD_LOGIC_VECTOR (3 downto 0));
end SSD;

architecture arch of SSD is

signal d: std_logic_vector(3 downto 0);
signal count:STD_LOGIC_VECTOR(15 downto 0);
constant full_counter: std_logic_vector(15 downto 0):=(others=&gt;'1');

begin

process(d)
begin
    case d is
        when "0001" =&gt; catod &lt;= not("1111001") ;   --1
        when "0010" =&gt; catod &lt;= not("0100100") ;   --2
        when "0011" =&gt; catod &lt;= not("0110000") ;   --3
        when "0100" =&gt; catod &lt;= not("0011001") ;   --4
        when "0101" =&gt; catod &lt;= not("0010010") ;   --5
        when "0110" =&gt; catod &lt;= not("0000010") ;   --6
        when "0111" =&gt; catod &lt;= not("1111000") ;   --7
        when "1000" =&gt; catod &lt;= not("0000000") ;   --8
        when "1001" =&gt; catod &lt;= not("0010000") ;   --9
        when others =&gt; catod &lt;= not("1000000") ;   --0
    end case;
end process;

process(clk)
    begin
        if(rising_edge(clk)) then
		if(count = full_counter) then count &lt;= "0000000000000000";
		else count&lt;=count+'1';
		end if;
        end if;
end process;

process(count(15 downto 14))
    begin
        case count(15 downto 14) is
            when "00" =&gt; anod &lt;= not("1110");
            when "01" =&gt; anod &lt;= not("1101");
            when "10" =&gt; anod &lt;= not("1011");
            when others =&gt; anod &lt;= not("0111");
            end case;
end process;

process(count(15 downto 14),digit0,digit1,digit2,digit3)
    begin
        case count(15 downto 14) is
            when "00" =&gt; d &lt;= digit0;
            when "01" =&gt; d &lt;= digit1;
            when "10" =&gt; d &lt;= digit2;
            when others =&gt; d &lt;= digit3;
            end case;
end process;

end architecture;</vhdl>
  <vhdl name="divizor_frecventa">LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;


entity divizor_frecventa is
port (clk_in : in std_logic;
       clk_out : out std_logic
     );
end divizor_frecventa;

architecture Behavioral of divizor_frecventa is

signal count : integer :=0;
signal b : std_logic :='0';
begin

 --clk generation.For 100 MHz clock this generates 1 Hz clock.
process(clk_in) 
begin
if(rising_edge(clk_in)) then
count &lt;=count+1;
if(count = 50000000-1) then
b &lt;= not b;
count &lt;=0;

end if;
end if;
clk_out&lt;=b;
end process;
end;</vhdl>
  <vhdl name="register_16bit">Library IEEE;
use IEEE.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity register_16bit is 
	port(
		input: in std_logic_vector(15 downto 0);
		clk: in std_logic;
		output: out std_logic_vector(15 downto 0)
	);
end register_16bit;

architecture arh of register_16bit is 

begin

	process(clk)
	
	begin
		if clk='1' and clk'event then 
			output&lt;=input;		
		end if;
	end process;

end arh;</vhdl>
  <vhdl name="dmux">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY dmux IS&#13;
  PORT (&#13;
  input: in std_logic_vector(15 downto 0);
  adunare, inmultire, impartire ,egal: in std_logic;
  output1, output2: out std_logic_vector(15 downto 0);
  operatie_aleasa: out std_logic_vector(2 downto 0)
    );&#13;
END dmux;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF dmux IS&#13;
&#13;
BEGIN&#13;
	process(adunare, inmultire, impartire ,egal)
	variable aux: std_logic_vector(2 downto 0);
	begin
&#13;		if adunare='1' then output1&lt;=input;
		aux:="001";
		end if;

		if inmultire='1' then output1&lt;=input;
		aux:="010";
		end if;

		if impartire='1' then output1&lt;=input;
		aux:="100";
		end if;

		if egal='1' then 
			output2&lt;=input;
			operatie_aleasa&lt;=aux;
		end if;
&#13;	end process;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="bcd_bin">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;



entity bcd_bin is
    Port ( bcd_in_0 : in  STD_LOGIC_VECTOR (3 downto 0);
           bcd_in_10 : in  STD_LOGIC_VECTOR (3 downto 0);
           bcd_in_100 : in  STD_LOGIC_VECTOR (3 downto 0);
           bcd_in_1000 : in  STD_LOGIC_VECTOR (3 downto 0);
           semn: in std_logic;
           bin_out : out  STD_LOGIC_VECTOR (15 downto 0));
end bcd_bin;

architecture Behavioral of bcd_bin is

begin

process

variable aux: std_logic_vector(15 downto 0);

begin
	aux := (bcd_in_0 * "01")  --multiply by 1
                + (bcd_in_10 * "1010") --multiply by 10
                + (bcd_in_100 * "1100100") --multiply by 100
                + (bcd_in_1000 * "001111101000"); --multiply by 1000
	aux(15):=semn;
	
	bin_out&lt;=aux;

end process;

end Behavioral;</vhdl>
  <vhdl name="mux">
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
use ieee.std_logic_unsigned.all;
&#13;
ENTITY mux IS&#13;
  PORT (&#13;
  	input1, input2: in std_logic_vector(15 downto 0);
  	sel: in std_logic;
  	mode: out std_logic;
  	output: out std_logic_vector(15 downto 0)
    );&#13;
END mux;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF mux IS&#13;
BEGIN&#13;
	process
	variable aux:std_logic:='1';
	begin
		if sel='1' then aux:=not(aux);
		else aux:=aux;
		end if;

		if aux='0' then output&lt;=input1;
		elsif aux='1' then output&lt;=input2;
		end if;

		mode&lt;=aux;
	end process;

END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="bin_bcd">library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity bin_bcd is
    port ( 
        input:      in   std_logic_vector (15 downto 0);
        ones:       out  std_logic_vector (3 downto 0);
        tens:       out  std_logic_vector (3 downto 0);
        hundreds:   out  std_logic_vector (3 downto 0);
        thousands:  out  std_logic_vector (3 downto 0);
        semn: out std_logic
    );
end bin_bcd;

architecture arh of bin_bcd is
	signal aux: std_logic_vector(15 downto 0):='0'&amp;input(14 downto 0);
    alias Hex_Display_Data: std_logic_vector (15 downto 0) is aux;
    alias rpm_1:    std_logic_vector (3 downto 0) is ones;
    alias rpm_10:   std_logic_vector (3 downto 0) is tens;
    alias rpm_100:  std_logic_vector (3 downto 0) is hundreds;
    alias rpm_1000: std_logic_vector (3 downto 0) is thousands;
begin
    process (input)
        type fourbits is array (3 downto 0) of std_logic_vector(3 downto 0);
        variable bcd:   std_logic_vector (15 downto 0);
        variable bint:  std_logic_vector (13 downto 0);
    begin
        bcd := (others =&gt; '0');     
        bint := Hex_Display_Data (13 downto 0); 

        for i in 0 to 13 loop
            bcd(15 downto 1) := bcd(14 downto 0);
            bcd(0) := bint(13);
            bint(13 downto 1) := bint(12 downto 0);
            bint(0) := '0';

            if i &lt; 13 and bcd(3 downto 0) &gt; "0100" then
                bcd(3 downto 0) := 
                    std_logic_vector (unsigned(bcd(3 downto 0)) + 3);
            end if;
            if i &lt; 13 and bcd(7 downto 4) &gt; "0100" then
                bcd(7 downto 4) := 
                    std_logic_vector(unsigned(bcd(7 downto 4)) + 3);
            end if;
            if i &lt; 13 and bcd(11 downto 8) &gt; "0100" then
                bcd(11 downto 8) := 
                    std_logic_vector(unsigned(bcd(11 downto 8)) + 3);
            end if;
            if i &lt; 13 and bcd(15 downto 12) &gt; "0100" then
                bcd(11 downto 8) := 
                    std_logic_vector(unsigned(bcd(15 downto 12)) + 3);
            end if;
        end loop;

        (rpm_1000, rpm_100, rpm_10, rpm_1)  &lt;= 
                  fourbits'( bcd (15 downto 12), bcd (11 downto 8), 
                               bcd ( 7 downto  4), bcd ( 3 downto 0) );
        semn&lt;=input(15);
    end process ;
end architecture;</vhdl>
  <vhdl name="debouncer">library IEEE;
    use IEEE.std_logic_1164.all;
    use IEEE.numeric_std.all;

entity debouncer is
    port(    clk : in std_logic;
             btn : in std_logic;
         btn_clr : out std_logic);
end debouncer;

architecture behavioural of debouncer is

    constant delay : integer := 650000; -- 6.5ms
    signal count : integer := 0;
    signal btn_tmp : std_logic := '0';

    begin

    process(clk)
    begin
        if rising_edge(clk) then
            if (btn /= btn_tmp) then
                btn_tmp &lt;= btn;
                count &lt;= 0;
            elsif (count = delay) then
                btn_clr &lt;= btn_tmp;
            else
                count &lt;= count + 1;
            end if;
        end if;
    end process;

end behavioural;</vhdl>
  <vhdl name="sumator_scazator">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.std_logic_unsigned.all;

entity sumator_scazator is
    port(a, b: in std_logic_vector(15 downto 0);
        res: out std_logic_vector(15 downto 0)
        );
end sumator_scazator;

architecture Behavioral of sumator_scazator is
begin
    process(b)
    variable aux:std_logic_vector(15 downto 0);
    begin
    aux:=x"0000";
   
            if a(15) = '1' and b(15) = '0' then
                if a(14 downto 0) &gt; b(14 downto 0) then
                    aux(14 downto 0):=a(14 downto 0)-b(14 downto 0);
                    aux(15):= '1';
                else 
                    aux(14 downto 0):=b(14 downto 0) - a(14 downto 0);
                    aux(15):='0';
                end if;
            elsif a(15) = '0' and b(15) = '1' then
                if b(14 downto 0) &gt; a(14 downto 0) then
                    aux(14 downto 0):=b(14 downto 0)-a(14 downto 0);
                    aux(15):= '1';
                else 
                    aux(14 downto 0):=a(14 downto 0) - b(14 downto 0);
                    aux(15):='0';
                end if;          
            elsif a(15)='1' and b(15)='1' then
                    aux(14 downto 0):=a(14 downto 0)+b(14 downto 0);
                    aux(15) := '1';
            else 
                    aux(14 downto 0):=a(14 downto 0) + b(14 downto 0);
                    aux(15):='0';
            end if;
        res&lt;=aux;
    end process;
end Behavioral;
</vhdl>
  <vhdl name="booth_multiplier">LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.std_logic_signed.ALL;

ENTITY booth_multiplier IS

	
	
	PORT(m : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
	     r : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
	     result : OUT STD_LOGIC_VECTOR(15 DOWNTO 0));
		  
END booth_multiplier;

ARCHITECTURE behavior OF booth_multiplier IS

BEGIN
	
	PROCESS(r)
		
		CONSTANT X_ZEROS : STD_LOGIC_VECTOR(15 DOWNTO 0) := (OTHERS =&gt; '0');
		CONSTANT Y_ZEROS : STD_LOGIC_VECTOR(15 DOWNTO 0) := (OTHERS =&gt; '0');
		
		VARIABLE a, s, p : STD_LOGIC_VECTOR(33 DOWNTO 0);
		VARIABLE mn      : STD_LOGIC_VECTOR(15 DOWNTO 0);
	
	BEGIN
		
		a := (OTHERS =&gt; '0');
		s := (OTHERS =&gt; '0');
		p := (OTHERS =&gt; '0');
		
		IF (m /= X_ZEROS AND r /= Y_ZEROS) THEN
			
			a(32 DOWNTO 17) := m;
			a(33) := m(15);
			
			mn := (NOT m) + 1;
			
			s(32 DOWNTO 17) := mn;
			s(33) := NOT(m(15));
			
			p(16 DOWNTO 1) := r;
			
			FOR i IN 1 TO 16 LOOP
				
				IF (p(1 DOWNTO 0) = "01") THEN
					p := p + a;
				ELSIF (p(1 DOWNTO 0) = "10") THEN
					p := p + s;
				END IF;
				
				-- Shift Right Arithmetic
				p(32 DOWNTO 0) := p(33 DOWNTO 1);
			
			END LOOP;
			
		END IF;
		
		result(14 downto 0) &lt;= p(15 DOWNTO 1);
		result(15) &lt;= P(33);
		
	END PROCESS;
	
END behavior;</vhdl>
  <vhdl name="impartire">library IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;

entity impartire is
port(
    X   : in STD_LOGIC_VECTOR(15 downto 0);
    Y   : in STD_LOGIC_VECTOR(15 downto 0);
    R   : out STD_LOGIC_VECTOR(15 downto 0)
);
end impartire;

architecture Behavioral of impartire is
begin

process(Y)
begin
	R(14 downto 0) &lt;= std_logic_vector(to_signed(to_integer(signed(X(14 downto 0)) / signed(Y(14 downto 0))),15));
	R(15)&lt;= x(15) xor y(15);
end process;
end Behavioral;</vhdl>
  <vhdl name="mux_ue">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY mux_ue IS&#13;
  PORT (&#13;
  input1, input2, input3: in std_logic_vector(15 downto 0);
  salvare: in std_logic;
  sel: in std_logic_vector(2 downto 0);
  output: out std_logic_vector(15 downto 0)
    );&#13;
END mux_ue;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF mux_ue IS&#13;
&#13;
BEGIN&#13;
&#13;	process(salvare)
	begin
		if salvare='1' then 
		case sel is 
			when "001" =&gt; output&lt;=input1;
			when "010" =&gt; output&lt;=input2;
			when others=&gt;output&lt;=input3;
		end case;
		end if;
	end process;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="register_3bit">Library IEEE;
use IEEE.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity register_3bit is 
	port(
		input: in std_logic_vector(2 downto 0);
		clk: in std_logic;
		output: out std_logic_vector(2 downto 0)
	);
end register_3bit;

architecture arh of register_3bit is 

begin

	process(clk)
	
	begin
		if clk='1' and clk'event then 
			output&lt;=input;		
		end if;
	end process;

end arh;</vhdl>
</project>
